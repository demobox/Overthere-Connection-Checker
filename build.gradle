apply plugin: 'java'
apply plugin: 'maven'

group = 'com.xebialabs.deployit'
version = '1.1-SNAPSHOT'

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

dependencies {
  compile 'com.xebialabs.overthere:overthere:1.0-alpha-13'
  compile 'commons-lang:commons-lang:2.5'
  compile 'args4j:args4j:2.0.16'
  compile 'ch.qos.logback:logback-classic:0.9.24'
  testCompile 'junit:junit:4.8.2'
}

localNexusBaseUrl = 'http://localhost:8081/nexus/content'

repositories {
	mavenLocal()
	mavenRepo urls: "${localNexusBaseUrl}/groups/public/"
}

task jarWithDeps(type: Jar, dependsOn: classes) {
	archiveName = "${baseName}.${extension}"
	
	// this project's classes and all deps
	from sourceSets*.classesDir
	from configurations.compile.collect {	it.isDirectory() ? it : zipTree(it) }
	exclude 'META-INF/*'
	
  manifest {
  	attributes 'Main-Class': 'com.xebialabs.deployit.overthere.ConnectionChecker'
  }
}

afterEvaluate { eachProject ->
  Set testTasks = eachProject.tasks.withType(Test).all
  
  testTasks.each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom { 
    project { 
      build { 
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding 
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        } 
      } 
    } 
  }.writeTo('pom.xml')
}
