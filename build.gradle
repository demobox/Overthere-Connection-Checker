/*
 * IMPORTANT: If using Gradle version 1.0-milestone-3 or earlier, please apply
 *            'pre-1.0-milestone-4.diff' using 'git apply pre-1.0-milestone-4.diff'
 */
apply plugin: 'java'
apply plugin: 'maven'

group = 'com.xebialabs.deployit'
version = '1.1-SNAPSHOT'
overthereVersion = '1.0'

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

dependencies {
  compile("com.xebialabs.overthere:overthere:${overthereVersion}") {
    // the 2.6.1 version contains a corrupt class file
    exclude group: 'com.ibm.icu', module: 'icu4j'
  }
  compile 'com.ibm.icu:icu4j:3.4.4'
  compile 'commons-lang:commons-lang:2.5'
  compile 'args4j:args4j:2.0.16'
  compile 'ch.qos.logback:logback-classic:0.9.24'
  testCompile 'junit:junit:4.8.2'
}

repositories {
	mavenLocal()
}

task jarWithDeps(type: Jar, dependsOn: classes) {
	archiveName = "${baseName}.${extension}"
	mergeDir = "${buildDir}/merge"
	truezipSpiFile = 'META-INF/services/de.schlichtherle.truezip.fs.spi.FsDriverService'
	// no inheritance from other projects so no need to be lazy here
	runtimeDeps = configurations.runtime.collect { zipTree(it) }

	doFirst {
		new File(mergeDir).delete()
		mergeFiles(mergeDir, runtimeDeps, truezipSpiFile)
	}

	// this project's classes and all deps
	from sourceSets*.output.classesDir
	from(runtimeDeps) {
		exclude 'META-INF/*'
		exclude truezipSpiFile
	}
	from mergeDir

  manifest {
  	attributes 'Main-Class': 'com.xebialabs.deployit.overthere.ConnectionChecker'
  }
}

private def mergeFiles(targetDir, fileTrees, relativePath) {
  // prepare the merge
  mergedFile = new File("${targetDir}/${relativePath}")
  new File(mergedFile.parent).mkdirs()

  fileTrees*.matching({ include "**/${relativePath}" })*.each {
    mergedFile << it.bytes
  }
}

afterEvaluate { eachProject ->
  Set testTasks = eachProject.tasks.withType(Test)
  
  testTasks.each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom { 
    project { 
      build { 
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding 
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        } 
      } 
    } 
  }.writeTo('pom.xml')
}
